#+TITLE: Typescript Quick Start
#+AUTHOR: thkim
#+EMAIL: thkim256@gmail.com

* ch02
  #+BEGIN_SRC sh
  # tsconfig.json
  tsc --init
  #+END_SRC

* ch03 변수 선언과 기본 타입
** 상수 선언
   #+BEGIN_SRC typescript
   const a = 9;
   if (true) {
       const a = 12;
   }
   console.log(a);

   const profile = {
       name: "foo",
       month: a
   }

   // profile = "e"; // error

   profile.name = "b"
   profile.month--;
   console.log(profile);
   #+END_SRC

   #+RESULTS:
   : 9
   : { name: 'b', month: 8 }

** 자바스크립트 형태의 변수 선언과 동적 타이핑
   #+BEGIN_SRC typescript
   var width = 10;
   var height = 10.0;
   var myName = "happy";
   var animals = ["tiger", "horse", "rhinoceros"];
   var myFullName = { first: "happy", last: "grammer" }

   console.log(typeof width, typeof height);
   console.log(typeof myName);
   console.log(typeof animals, typeof myFullName);

   if (typeof width === "number" && typeof height === "number") {
       console.log("area: ", width * height);
   }
   #+END_SRC

   #+RESULTS:
   : number number
   : string
   : object object
   : area:  100

** 변수를 선언할 때 타입 지정
   #+BEGIN_SRC typescript
   var width2 : number = 10;
   var height2: number = 10.0;
   console.log("area: ", width2 * height2);
   #+END_SRC

   #+RESULTS:
   : area:  100

** symbol 타입
   symbol 타입은 ES6에서 추가된 특징으로서의 객체 속성의 유일하고 불변적인
   식별자로 사용

   #+BEGIN_SRC shell :results value drawer
   tsc xxx.ts -t es6
   #+END_SRC

   #+BEGIN_SRC typescript  :cmdline -t es6
   let hello = Symbol("hello");
   let hello2 = Symbol("hello");

   console.log(hello === hello2);
   console.log(hello, hello2);
   console.log(typeof hello);
   #+END_SRC

   #+RESULTS:
   : false
   : Symbol(hello) Symbol(hello)
   : symbol

** 속성 키로 사용할 수 있는 심벌 객체
   #+BEGIN_SRC typescript :cmdline -t es6
   const uniqueKey = Symbol();
   let obj = {};

   obj[uniqueKey] = 1234;
   console.log(obj[uniqueKey]);
   console.log(obj);
   #+END_SRC

   #+RESULTS:
   : 1234
   : { [Symbol()]: 1234 }

** enum을 선언하는 방법
   #+BEGIN_SRC typescript :cmdline -t es6
   enum WeekDay { Mon, Tue, Wed, Thu = Tue + Wed }
   let thu2: number = 10 * 2;
   enum WeekDay2 { Mon = 10, Tue, Wed = 10 << 2, Thu = thu2 }
   enum WeekDay3 { Mon = "Monday", Tue = "Tuesday" }

   console.log("1. " + JSON.stringify(WeekDay));
   console.log("2. " + JSON.stringify(WeekDay2));
   console.log("3. " + JSON.stringify(WeekDay3));
   console.log("4. Mon=", WeekDay.Mon, ", Tue=", WeekDay["Tue"], ", Wed=", WeekDay.Wed);
   console.log("5. Mon=", WeekDay[0], ", Tue=", WeekDay[1], ", Wed=", WeekDay[2]);
   console.log("6. ", typeof WeekDay);
   #+END_SRC

   #+RESULTS:
   : 1. {"0":"Mon","1":"Tue","2":"Wed","3":"Thu","Mon":0,"Tue":1,"Wed":2,"Thu":3}
   : 2. {"10":"Mon","11":"Tue","20":"Thu","40":"Wed","Mon":10,"Tue":11,"Wed":40,"Thu":20}
   : 3. {"Mon":"Monday","Tue":"Tuesday"}
   : 4. Mon= 0 , Tue= 1 , Wed= 2
   : 5. Mon= Mon , Tue= Tue , Wed= Wed
   : 6.  object

** any타입
   any타입은 모든 타입의 가장 최상위 타입

   #+BEGIN_SRC typescript :cmdline -t es6
   let basket: any = 10;
   basket = true;
   basket = "banana";
   console.log(basket);

   let vList: any[] = [1, false, "happy"];
   console.log(vList[0]);
   #+END_SRC

   #+RESULTS:
   : banana
   : 1

** 타입에 따른 속성에 접근할 수 있는지를 확인
   #+BEGIN_SRC typescript :cmdline -t es6
   let n = 50;
   console.log(typeof n, n.toFixed(1));

   let n2: Object = 50;
   console.log(typeof n2);

   let n3: any = 50;
   console.log(typeof n3, n3.toFixed(1));

   let n4: any = "happy"
   console.log(typeof n4, n4.charAt(0));
   #+END_SRC

   #+RESULTS:
   : number 50.0
   : number
   : number 50.0
   : string h

** 제네릭 배열
   #+BEGIN_SRC typescript :cmdline -t es6
   let arr: string[] = ["a", "b", "c"];
   let arr2: Array<String> = ["a", "b", "c"];
   console.log(arr);
   console.log(arr2);
   #+END_SRC

   #+RESULTS:
   : [ 'a', 'b', 'c' ]
   : [ 'a', 'b', 'c' ]

** 튜플(tuple) 타입
   #+BEGIN_SRC typescript :cmdline -t es6
   let x: [string, number] = ["tuple", 100];
   console.log(typeof x, typeof x[0], typeof x[1]);
   console.log(x[0].substr(0, 2), x[1].toFixed(2));

   #+END_SRC

   #+RESULTS:
   : object string number
   : tu 100.00

* ch04 제어문
** if문의 조건으로 사용될 수 있는 불리언 타입과 숫자 타입
   #+BEGIN_SRC typescript :cmdline -t es6
   let text: string = "";
   let statusActive: number = 0;
   let isEnabled: boolean = true;

   if (statusActive || text) {
       console.log("1");
   }
   if (isEnabled && 2 > 1) {
       console.log("2");
   }
   #+END_SRC

   #+RESULTS:
   : 2

** switch
   #+BEGIN_SRC shell :results value drawer
   # switch break check ignored
   tsc xxx.ts --noFallthroughCasesInSwitch
   #+END_SRC

   #+BEGIN_SRC typescript :cmdline -t es6
   let cmd: any = "hi";
   switch (cmd) {
       case "hi":
           console.log("hi");
           break;
       case 0:
           console.log(0);
           break;
   }
   #+END_SRC

   #+RESULTS:
   : hi

** es6 for-of
   #+BEGIN_SRC typescript :cmdline -t es6
   for (let v of "hi") {
       console.log(v);
   }

   for (const v of [1, 2, 3]) {
       console.log(v);
   }
   #+END_SRC

   #+RESULTS:
   : h
   : i
   : 1
   : 2
   : 3

** map
*** es6 map
    #+BEGIN_SRC typescript :cmdline -t es6
    let map = new Map([["one", 1], ["one", 2]]);
    map.set("one", 3);

    for (let entry of map) {
        console.log(entry);
    }
    console.log(map.get("one"));
    #+END_SRC

    #+RESULTS:
    : [ 'one', 3 ]
    : 3

*** es5 map
    #+BEGIN_SRC typescript :cmdline -t es6
    let map: { [key: string]: number; } = {};
    map["one"] = 1;
    map["one"] = 2;
    map["one"] = 3;

    for (let entry in map) {
        console.log(entry);
    }
    console.log(map["one"]);
    #+END_SRC

    #+RESULTS:
    : one
    : 3

** set
   #+BEGIN_SRC typescript :cmdline -t es6
   let set = new Set([1, 2, 1, 3, 4, 2]);

   for (let v of set) {
       console.log(v)
   }
   #+END_SRC

   #+RESULTS:
   : 1
   : 2
   : 3
   : 4

** [Symbol.iterator]()의 선언과 사용법
   #+BEGIN_SRC typescript :cmdline -t es6
   let arr =[1,2];
   let itObj = arr[Symbol.iterator]();

   console.log("typeof: ", typeof itObj);
   console.log("0:", itObj.next());
   console.log("1:", itObj.next());
   console.log("2:", itObj.next());
   #+END_SRC

   #+RESULTS:
   : typeof:  object
   : 0: { value: 1, done: false }
   : 1: { value: 2, done: false }
   : 2: { value: undefined, done: true }
